# -*- coding: utf-8 -*-
"""SmartAgentStateMachine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ghj9dOfqb14iHd_l1YBO5NpgvvN0IdP
"""

!pip install matplotlib

import random
import matplotlib.pyplot as plt

class GameAgent:
    def __init__(self, secret_number, max_attempts=5, difficulty_level="f√°cil"):
        self.secret_number = secret_number
        self.max_attempts = max_attempts
        self.attempts = 0
        self.state = "Esperando tentativa"
        self.history = []  # Hist√≥rico de tentativas
        self.difficulty_level = difficulty_level

    def make_guess(self, guess):
        self.attempts += 1
        self.history.append(guess)

  # Easter Egg do Gigante de Alterosa
        if guess == 13:
            print("GALO! üêì")

        if guess == self.secret_number:
            if self.difficulty_level == "armageddon":
                self.state = "Acertou!"
                return "N√£o sei como, mas voc√™ conseguiu! Voc√™ √© um verdadeiro DEUS GAMER!"
            else:
                self.state = "Acertou!"
                return "Parab√©ns! Voc√™ acertou o n√∫mero."
        elif self.attempts >= self.max_attempts:
            self.state = "Fim do jogo."
            if self.difficulty_level == "armageddon":
                return "Que pena... O n√∫mero era {}.".format(self.secret_number)
            else:
                return f"Game Over! O n√∫mero era {self.secret_number}."
        elif self.difficulty_level == "dif√≠cil":

            self.state = "Tentativa errada."
            return "Tentativa errada. Tente novamente."
        elif guess < self.secret_number:
            self.state = "Tentativa errada (muito baixo)."
            return "O n√∫mero √© maior. Tente novamente."
        else:
            self.state = "Tentativa errada (muito alto)."
            return "O n√∫mero √© menor. Tente novamente."

    def get_hint(self, guess):
        if self.difficulty_level == "f√°cil":
            # Dicas para o n√≠vel f√°cil
            hint = ""
            # Dica 1: Par ou √≠mpar
            if self.secret_number % 2 == 0:
                hint += "Dica: O n√∫mero secreto √© par. "
            else:
                hint += "Dica: O n√∫mero secreto √© √≠mpar. "
            # Dica 2: Proximidade
            difference = abs(self.secret_number - guess)
            if difference <= 10:
                hint += "Voc√™ est√° pr√≥ximo do n√∫mero secreto."
            else:
                hint += "Voc√™ est√° longe do n√∫mero secreto."
            return hint

        elif self.difficulty_level == "m√©dio":
            # Dicas para o n√≠vel m√©dio
            difference = abs(self.secret_number - guess)
            if difference <= 10:
                return "Dica: Voc√™ est√° pr√≥ximo do n√∫mero secreto."
            else:
                return "Dica: Voc√™ est√° longe do n√∫mero secreto."

        elif self.difficulty_level == "dif√≠cil":
            # Sem dicas para o n√≠vel dif√≠cil
            return "Modo dif√≠cil: Sem dicas por aqui!"

        elif self.difficulty_level == "armageddon":
            # Sem dicas para o modo Armageddon
            return ""  # Coloquei isso aqui para n√£o ficar aparecendo aquela mensagem redundante no Game Over

        else:
            return "Sem dicas dispon√≠veis."


def escolher_dificuldade():
    while True:
        nivel = input("Escolha a dificuldade: F√°cil(1), M√©dio(2), Dif√≠cil(3) ou ARMAGEDDON(4): ")
        if nivel in ["1", "2", "3", "4"]:
            break
        else:
            print("Entrada inv√°lida. Por favor, escolha 1, 2, 3 ou 4.")

    if nivel == "1":
        return "f√°cil", 10
    elif nivel == "2":
        return "m√©dio", 5
    elif nivel == "3":
        return "dif√≠cil", 3
    elif nivel == "4":
        # Confirma√ß√£o para o Modo ARMAGEDDON
        while True:
            confirmacao = input("Tem certeza que quer selecionar o modo ARMAGEDDON? (S/N): ").strip().upper()
            if confirmacao == "S":
                return "armageddon", 1
            elif confirmacao == "N":
                print("Voltando para a sele√ß√£o de dificuldades...")
                return escolher_dificuldade()  # Volta para a sele√ß√£o de dificuldades
            else:
                print("Entrada inv√°lida. Digite S para confirmar ou N para voltar.")


def plot_attempts(agent):
    plt.figure(figsize=(8, 5))
    plt.plot(range(1, len(agent.history) + 1), agent.history, marker='o', linestyle='-')
    plt.axhline(y=agent.secret_number, color='r', linestyle='--', label='N√∫mero Secreto')
    plt.xlabel("Tentativas")
    plt.ylabel("Valor do Palpite")
    plt.title("Evolu√ß√£o das Tentativas do Jogador")
    plt.legend()
    plt.show()


# Iniciando o jogo
dificuldade, max_attempts = escolher_dificuldade()
agent = GameAgent(secret_number=random.randint(1, 100), max_attempts=max_attempts, difficulty_level=dificuldade)

print(f"Modo de dificuldade: {dificuldade.capitalize()}")
print(f"Voc√™ tem {max_attempts} tentativas. Boa sorte!")

while agent.state not in ["Acertou!", "Fim do jogo"]:
    guess = int(input("Digite um n√∫mero: "))
    print(agent.make_guess(guess))
    if agent.state == "Fim do jogo":
        break  # Estive tentando encerrar o jogo logo ap√≥s que o jogador perde no modo ARMAGEDDON, n√£o consegui
    if agent.state != "Acertou!" and agent.state != "Fim do jogo" and agent.difficulty_level != "armageddon":
        print(agent.get_hint(guess))  # S√≥ exibe dicas se n√£o for o modo Armageddon

# Gr√°fico das tentativas
plot_attempts(agent)

# Na verdade, eu queria que o jogo terminasse imediatamente ap√≥s voc√™ perder em qualquer dificuldade, mas n√£o consegui implementar isso